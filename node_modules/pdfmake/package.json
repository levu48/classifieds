{
  "name": "pdfmake",
  "version": "0.1.18",
  "description": "Client/server side PDF printing in pure JavaScript",
  "main": "src/printer.js",
  "directories": {
    "test": "tests"
  },
  "dependencies": {
    "pdfkit": "~0.7.0",
    "lodash": "~3.1.0",
    "lodash-node": "~3.1.0"
  },
  "devDependencies": {
    "expose-loader": "^0.6.0",
    "gulp": "^3.8.11",
    "gulp-jshint": "^1.10.0",
    "gulp-rename": "^1.2.2",
    "gulp-replace": "^0.5.3",
    "gulp-sourcemaps": "^1.5.2",
    "gulp-spawn-mocha": "^2.0.1",
    "gulp-uglify": "^1.2.0",
    "gulp-util": "^3.0.4",
    "gulp-webpack": "^1.4.0",
    "json-loader": "^0.5.1",
    "pdfkit": "^0.7.1",
    "sinon": "~1.12.2",
    "string-replace-webpack-plugin": "0.0.1",
    "webpack": "^1.8.9"
  },
  "scripts": {
    "test": "gulp"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/bpampuch/pdfmake.git"
  },
  "keywords": [
    "pdf",
    "javascript",
    "printing",
    "layout"
  ],
  "author": {
    "name": "Bartek Pampuch",
    "email": "bartosz.pampuch@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/bpampuch/pdfmake/issues"
  },
  "homepage": "https://bpampuch.github.io/pdfmake",
  "config": {
    "blanket": {
      "pattern": "src",
      "data-cover-never": [
        "node_modules",
        "tests"
      ]
    }
  },
  "readme": "pdfmake [![Build Status](https://travis-ci.org/bpampuch/pdfmake.png?branch=master)](https://travis-ci.org/bpampuch/pdfmake) [![NPM version](https://badge.fury.io/js/pdfmake.png)](http://badge.fury.io/js/pdfmake) [![Bower version](https://badge.fury.io/bo/pdfmake.png)](http://badge.fury.io/bo/pdfmake)\n=======\n\nClient/server side PDF printing in pure JavaScript\n\nCheck out [the playground](http://bpampuch.github.io/pdfmake/playground.html)\n\n### Features\n\n* line-wrapping,\n* text-alignments (left, right, centered, justified),\n* numbered and bulleted lists,\n* tables and columns\n * auto/fixed/star-sized widths,\n * col-spans and row-spans,\n * headers automatically repeated in case of a page-break,\n* images and vector graphics,\n* convenient styling and style inheritance,\n* page headers and footers:\n * static or dynamic content,\n * access to current page number and page count,\n* background-layer\n* page dimensions and orientations,\n* margins,\n* custom page breaks,\n* font embedding,\n* support for complex, multi-level (nested) structures,\n* helper methods for opening/printing/downloading the generated PDF.\n\n## Getting Started\n\nThis document will walk you through the basics of pdfmake and will show you how to create PDF files in the browser. If you're interested in server-side printing check the examples folder.\n\nTo begin with the default configuration, you should include two files:\n\n* **pdfmake.min.js**,\n* **vfs_fonts.js** - default font definition (it contains Roboto, you can however [use custom fonts instead](https://github.com/bpampuch/pdfmake/wiki/Custom-Fonts---client-side))\n\n```html\n<!doctype html>\n<html lang='en'>\n<head>\n  <meta charset='utf-8'>\n  <title>my first pdfmake example</title>\n  <script src='build/pdfmake.min.js'></script>\n  <script src='build/vfs_fonts.js'></script>\n</head>\n<body>\n...\n```\n\nYou can get both files using bower:\n```\nbower install pdfmake\n```\n\nor copy them directly from the build directory from the repository.\n\n### Document-definition-object\n\npdfmake follows a declarative approach. It basically means, you'll never have to calculate positions manually or use commands like: ```writeText(text, x, y)```, ```moveDown``` etc..., as you would with a lot of other libraries.\n\nThe most fundamental concept to be mastered is the document-definition-object which can be as simple as:\n\n```js\nvar docDefinition = { content: 'This is an sample PDF printed with pdfMake' };\n```\n\nor become pretty complex (having multi-level tables, images, lists, paragraphs, margins, styles etc...).\n\nAs soon as you have the document-definition-object, you're ready to create and open/print/download the PDF:\n\n```js\n// open the PDF in a new window\npdfMake.createPdf(docDefinition).open();\n\n// print the PDF (not working in this version, will be added back in a couple of days)\n// pdfMake.createPdf(docDefinition).print();\n\n// download the PDF\npdfMake.createPdf(docDefinition).download();\n```\n\n#### Styling\npdfmake makes it possible to style any paragraph or its part:\n\n```js\nvar docDefinition = {\n  content: [\n    // if you don't need styles, you can use a simple string to define a paragraph\n    'This is a standard paragraph, using default style',\n\n    // using a { text: '...' } object lets you set styling properties\n    { text: 'This paragraph will have a bigger font', fontSize: 15 },\n\n    // if you set the value of text to an array instead of a string, you'll be able\n    // to style any part individually\n    {\n      text: [\n        'This paragraph is defined as an array of elements to make it possible to ',\n        { text: 'restyle part of it and make it bigger ', fontSize: 15 },\n        'than the rest.'\n      ]\n    }\n  ]\n};\n```\n\n#### Style dictionaries\nIt's also possible to define a dictionary of reusable styles:\n\n```js\nvar docDefinition = {\n  content: [\n    { text: 'This is a header', style: 'header' },\n    'No styling here, this is a standard paragraph',\n    { text: 'Another text', style: 'anotherStyle' },\n    { text: 'Multiple styles applied', style: [ 'header', 'anotherStyle' ] }\n  ],\n\n  styles: {\n    header: {\n      fontSize: 22,\n      bold: true\n    },\n    anotherStyle: {\n      italics: true,\n      alignment: 'right'\n    }\n  }\n};\n\n```\n\nTo have a deeper understanding of styling in pdfmake, style inheritance and local-style-overrides check STYLES1, STYLES2 and STYLES3 examples in playground.\n\n#### Columns\n\nBy default paragraphs are rendered as a vertical stack of elements (one below another). It is possible however to divide available space into columns.\n\n```js\nvar docDefinition = {\n  content: [\n    'This paragraph fills full width, as there are no columns. Next paragraph however consists of three columns',\n    {\n      columns: [\n        {\n          // auto-sized columns have their widths based on their content\n          width: 'auto',\n          text: 'First column'\n        },\n        {\n          // star-sized columns fill the remaining space\n          // if there's more than one star-column, available width is divided equally\n          width: '*',\n          text: 'Second column'\n        },\n        {\n          // fixed width\n          width: 100,\n          text: 'Third column'\n        },\n        {\n          // % width\n          width: '20%',\n          text: 'Fourth column'\n        }\n      ],\n      // optional space between columns\n      columnGap: 10\n    },\n    'This paragraph goes below all columns and has full width'\n  ]\n};\n\n```\n\nColumn content is not limited to a simple text. It can actually contain any valid pdfmake element. Make sure to look at the COLUMNS example in playground.\n\n#### Tables\n\nConceptually tables are similar to columns. They can however have headers, borders and cells spanning over multiple columns/rows.\n\n```js\nvar docDefinition = {\n  content: [\n    {\n      table: {\n        // headers are automatically repeated if the table spans over multiple pages\n        // you can declare how many rows should be treated as headers\n        headerRows: 1,\n        widths: [ '*', 'auto', 100, '*' ],\n\n        body: [\n          [ 'First', 'Second', 'Third', 'The last one' ],\n          [ 'Value 1', 'Value 2', 'Value 3', 'Value 4' ],\n          [ { text: 'Bold value', bold: true }, 'Val 2', 'Val 3', 'Val 4' ]\n        ]\n      }\n    }\n  ]\n};\n```\n\n\n\nAll concepts related to tables are covered by TABLES example in playground.\n\n#### Lists\n\npdfMake supports both numbered and bulleted lists:\n\n```js\nvar docDefinition = {\n  content: [\n    'Bulleted list example:',\n    {\n      // to treat a paragraph as a bulleted list, set an array of items under the ul key\n      ul: [\n        'Item 1',\n        'Item 2',\n        'Item 3',\n        { text: 'Item 4', bold: true },\n      ]\n    },\n\n    'Numbered list example:',\n    {\n      // for numbered lists set the ol key\n      ol: [\n        'Item 1',\n        'Item 2',\n        'Item 3'\n      ]\n    }\n  ]\n};\n```\n\n#### Headers and footers\n\nPage headers and footers in pdfmake can be: *static* or *dynamic*.\n\nThey use the same syntax:\n\n```js\nvar docDefinition = {\n  header: 'simple text',\n\n  footer: {\n    columns: [\n      'Left part',\n      { text: 'Right part', alignment: 'right' }\n    ]\n  },\n\n  content: (...)\n};\n```\n\nFor dynamically generated content (including page numbers and page count) you can pass a function to the header or footer:\n\n```js\nvar docDefinition = {\n  footer: function(currentPage, pageCount) { return currentPage.toString() + ' of ' + pageCount; },\n  header: function(currentPage, pageCount) {\n    // you can apply any logic and return any valid pdfmake element\n\n    return { text: 'simple text', alignment: (currentPage % 2) ? 'left' : 'right' };\n  },\n  (...)\n};\n```\n\n#### Background-layer\n\nThe background-layer will be added on every page.\n\n```js\nvar docDefinition = {\n  background: 'simple text',\n\n  content: (...)\n};\n```\n\nIt may contain any other object as well (images, tables, ...) or be dynamically generated:\n\n```js\nvar docDefinition = {\n  background: function(currentPage) {\n    return 'simple text on page ' + currentPage\n  },\n\n  content: (...)\n};\n```\n\n#### Margins\n\nAny element in pdfMake can have a margin:\n\n```js\n(...)\n// margin: [left, top, right, bottom]\n{ text: 'sample', margin: [ 5, 2, 10, 20 ] },\n\n// margin: [horizontal, vertical]\n{ text: 'another text', margin: [5, 2] },\n\n// margin: equalLeftTopRightBottom\n{ text: 'last one', margin: 5 }\n(...)\n```\n\n#### Stack of paragraphs\n\nYou could have figured out by now (from the examples), that if you set the ```content``` key to an array, the  document becomes a stack of paragraphs.\n\nYou'll quite often reuse this structure in a nested element, like in the following example:\n```js\nvar docDefinition = {\n  content: [\n    'paragraph 1',\n    'paragraph 2',\n    {\n      columns: [\n        'first column is a simple text',\n        [\n          // second column consists of paragraphs\n          'paragraph A',\n          'paragraph B',\n          'these paragraphs will be rendered one below another inside the column'\n        ]\n      ]\n    }\n  ]\n};\n```\n\nThe problem with an array is that you cannot add styling properties to it (to change fontSize for example).\n\nThe good news is - array is just a shortcut in pdfMake for { stack: [] }, so if you want to restyle the whole stack, you can do it using the expanded definition:\n```js\nvar docDefinition = {\n  content: [\n    'paragraph 1',\n    'paragraph 2',\n    {\n      columns: [\n        'first column is a simple text',\n        {\n          stack: [\n            // second column consists of paragraphs\n            'paragraph A',\n            'paragraph B',\n            'these paragraphs will be rendered one below another inside the column'\n          ],\n          fontSize: 15\n        }\n      ]\n    }\n  ]\n};\n```\n\n#### Images\n\nThis is simple. Just use the ```{ image: '...' }``` node type.\n\nJPEG and PNG formats are supported.\n\n```js\nvar docDefinition = {\n  content: [\n    {\n      // you'll most often use dataURI images on the browser side\n      // if no width/height/fit is provided, the original size will be used\n      image: 'data:image/jpeg;base64,...encodedContent...'\n    },\n    {\n      // if you specify width, image will scale proportionally\n      image: 'data:image/jpeg;base64,...encodedContent...',\n      width: 150\n    },\n    {\n      // if you specify both width and height - image will be stretched\n      image: 'data:image/jpeg;base64,...encodedContent...',\n      width: 150,\n      height: 150\n    },\n    {\n      // you can also fit the image inside a rectangle\n      image: 'data:image/jpeg;base64,...encodedContent...',\n      fit: [100, 100]\n    },\n    {\n      // if you reuse the same image in multiple nodes,\n      // you should put it to to images dictionary and reference it by name\n      image: 'mySuperImage'\n    },\n    {\n      // under NodeJS (or in case you use virtual file system provided by pdfmake)\n      // you can also pass file names here\n      image: 'myImageDictionary/image1.jpg'\n    }\n  ],\n\n  images: {\n    mySuperImage: 'data:image/jpeg;base64,...content...'\n  }\n};\n```\n\n\n#### Page dimensions, orientation and margins\n\n```js\nvar docDefinition = {\n  // a string or { width: number, height: number }\n  pageSize: 'A5',\n\n  // by default we use portrait, you can change it to landscape if you wish\n  pageOrientation: 'landscape',\n\n  // [left, top, right, bottom] or [horizontal, vertical] or just a number for equal margins\n  pageMargins: [ 40, 60, 40, 60 ],\n};\n```\n\nIf you set ```pageSize``` to a string, you can use one of the following values:\n* '4A0', '2A0', 'A0', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10',\n* 'B0', 'B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B9', 'B10',\n* 'C0', 'C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10',\n* 'RA0', 'RA1', 'RA2', 'RA3', 'RA4',\n* 'SRA0', 'SRA1', 'SRA2', 'SRA3', 'SRA4',\n* 'EXECUTIVE', 'FOLIO', 'LEGAL', 'LETTER', 'TABLOID'\n\nTo change page orientation within a document, add a page break with the new page orientation.\n\n```js\n{\n  pageOrientation: 'portrait',\n  content: [\n    {text: 'Text on Portrait'},\n    {text: 'Text on Landscape', pageOrientation: 'landscape', pageBreak: 'before'},\n    {text: 'Text on Landscape 2', pageOrientation: 'portrait', pageBreak: 'after'},\n    {text: 'Text on Portrait 2'},\n  ]\n}\n```\n\n## Coming soon\nHmmm... let me know what you need ;)\n\nThe goal is quite simple - make pdfmake useful for a looooooooot of people and help building responsive HTML5 apps with printing support.\n\nThere's one thing on the roadmap for v2 (no deadline however) - make the library hackable, so you can write plugins to:\n* extend document-definition-model (with things like { chart: ... }),\n* add syntax translators (like the provided [ ... ] -> { stack: [ ... ] }\n* build custom DSLs on top of document-definition-model (this is actually possible at the moment).\n\n\n## License\nMIT\n\n-------\n\npdfmake is based on a truly amazing library pdfkit.org - credits to @devongovett\n\nbig thanks to @yelouafi for making this library even better\n",
  "readmeFilename": "README.md",
  "_id": "pdfmake@0.1.18",
  "_shasum": "e8b91ebdad9d1f523d42c19eeade95425876b99f",
  "_from": "pdfmake@*",
  "_resolved": "https://registry.npmjs.org/pdfmake/-/pdfmake-0.1.18.tgz"
}
